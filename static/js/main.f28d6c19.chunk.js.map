{"version":3,"sources":["data/data.csv","reducers/mortgage.js","reducers/index.js","helpers/parser.js","components/Heatmap.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","initialState","initial","rate","years","monthlyOverpayment","rootReducer","combineReducers","mortgage","state","arguments","length","undefined","action","type","Object","objectSpread","val","parseTimestamp","timeStamp","dateString","split","timeString","slice","moment","concat","toDate","parseTime","format","parseDate","getDayInsights","data","newData","map","item","date","columns","time","push","reduce","r","a","create","parseData","timestamp","x","obj","Heatmap","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showTooltip","renderBarChart","style","renderChart","bind","assertThisInitialized","updateDimensions","setState","cellSize","window","innerWidth","cellMargin","addEventListener","removeEventListener","react_default","createElement","id","drawDayLabels","className","count","drawCalendar","d","day","dayInsights","rawData","console","log","dateData","_this2","weeksInMonth","month","m","d3","floor","offset","minDate","keys","maxDate","getDay","week","monthName","months","range","Date","parseInt","days","getFullYear","getMonth","find","key","setHours","i","filter","j","height","width","y","textAnchor","max","min","value","Math","apply","toConsumableArray","fillColor","rx","ry","fill","onMouseOver","ev","top","clientY","left","clientX","onMouseOut","onClick","weekArray","Array","_","startOf","isoWeekday","React","Component","App","then","catch","err","src_components_Heatmap","Boolean","location","hostname","match","store","createStore","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uOCKlCC,EAAe,CACnBC,QAAS,IACTC,KAAM,EACNC,MAAO,GACPC,mBAAoB,GCFPC,EAJKC,YAAgB,CAClCC,SDQa,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBT,EAAcY,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC/C,OAAQC,EAAOC,MACb,IAdgB,cAed,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEP,QAASW,EAAOI,MAEpB,IAjBa,WAkBX,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEN,KAAMU,EAAOI,MAEjB,IAvBc,YAwBZ,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEL,MAAOS,EAAOI,MAElB,IA1B4B,0BA2B1B,OAAOF,OAAAC,EAAA,EAAAD,CAAA,GACFN,EADL,CAEEJ,mBAAoBQ,EAAOI,MAE/B,QACE,OAAOR,oGEjCPS,EAAiB,SAAAC,GACrB,IAAMC,EAAaD,EAAUE,MAAM,KAAK,GAClCC,EAAaH,EAAUE,MAAM,KAAK,GAAGE,MAAM,GAAI,GACrD,OAAOC,IAAM,GAAAC,OAAIL,EAAJ,KAAAK,OAAkBH,GAAc,mBAAmBI,UAG5DC,EAAY,SAAAR,GAChB,IAAMG,EAAaH,EAAUE,MAAM,KAAK,GAAGE,MAAM,GAAI,GACrD,OAAOC,IAAM,GAAAC,OAAIH,GAAc,UAAUM,OAAO,aAG5CC,EAAY,SAAAV,GAAS,OAAIK,IAAM,GAAAC,OAAIN,EAAUE,MAAM,KAAK,IAAM,YACjEO,OAAO,cAAcP,MAAM,KAAK,IAoBtBS,EAAiB,SAAAC,GAC5B,IAAIC,EAAUD,EAAKE,IAAI,SAAAC,GAAI,MAAK,CAAEC,KAAMN,EAAUK,EAAKH,EAAKK,QAAQ,KAAMC,KAAMV,EAAUO,EAAKH,EAAKK,QAAQ,QAE5G,OADAJ,EAAQM,KAAK,CAAEH,KAAMN,EAAUE,EAAKK,QAAQ,IAAKC,KAAMnB,EAAea,EAAKK,QAAQ,MACpEJ,EATUO,OAAO,SAAUC,EAAGC,GAG7C,OAFAD,EAAEC,EAAEN,MAAQK,EAAEC,EAAEN,OAAS,GACzBK,EAAEC,EAAEN,MAAMG,KAAKG,EAAEJ,MACVG,GACNzB,OAAO2B,OAAO,QAQFC,EAnBG,SAAAZ,GAChB,IAAIC,EAAUD,EAAKE,IAAI,SAAAC,GAAI,MAAK,CAAEU,UAAWf,EAAUK,EAAKH,EAAKK,QAAQ,QACzEJ,EAAQM,KAAK,CAAEM,UAAWf,EAAUE,EAAKK,QAAQ,MACjD,IAAMS,EAAIb,EAAQC,IAAI,SAAAC,GAAI,OAAIA,EAAKU,YACnC,OAAwBC,EATUN,OAAO,SAASO,EAAKZ,GAEvD,OADAY,EAAIZ,IAASY,EAAIZ,IAAS,GAAK,EACxBY,GACN,oBCwJYC,qBApKb,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAAoC,KAAAJ,IAClBE,EAAAlC,OAAAqC,EAAA,EAAArC,CAAAoC,KAAApC,OAAAsC,EAAA,EAAAtC,CAAAgC,GAAAO,KAAAH,KAAMH,KACDvC,MAAQ,CACX8C,aAAa,EACbC,gBAAgB,EAChBC,MAAO,IAETR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAkC,KACnBA,EAAKY,iBAAmBZ,EAAKY,iBAAiBF,KAAtB5C,OAAA6C,EAAA,EAAA7C,QAAA6C,EAAA,EAAA7C,CAAAkC,KARNA,kFAYlBE,KAAKW,SAAS,CACZC,SAAUC,OAAOC,WAAa,IAC9BC,WAAYF,OAAOC,WAAa,mDAKlCd,KAAKU,+DAILG,OAAOG,iBAAiB,SAAUhB,KAAKU,iEAIvCG,OAAOI,oBAAoB,SAAUjB,KAAKU,mDAI1C,OACEQ,EAAA5B,EAAA6B,cAAA,OAAKC,GAAG,YACJpB,KAAKqB,gBAELrB,KAAK1C,MAAM8C,aACTc,EAAA5B,EAAA6B,cAAA,OAAKG,UAAU,UAAUhB,MAAON,KAAK1C,MAAMgD,OACxCjC,IAAO2B,KAAK1C,MAAM8C,aAAa3B,OAAO,sBACvCyC,EAAA5B,EAAA6B,cAAA,OAAKG,UAAU,QAAf,UACUtB,KAAK1C,MAAMiE,QAI3BL,EAAA5B,EAAA6B,cAAA,OAAKG,UAAU,UACXtB,KAAKwB,aAAaxB,KAAKH,MAAMjB,4CAM3B6C,GACV,IAAMC,EAAMrD,IAAOoD,GAAGhD,OAAO,cACvBkD,EAAchD,EAAeqB,KAAKH,MAAM+B,SAC9CC,QAAQC,IAAIH,EAAYD,yCAGbK,GAAU,IAAAC,EAAAhC,KACfiC,EAAe,SAAAC,GACnB,IAAMC,EAAIC,IAAaC,MAAMH,GAC7B,OAAOE,IAAaA,IAAYC,MAAMF,GAAIC,IAAaE,OAAOH,EAAE,IAAI3E,QAGhE+E,EAAUH,IAAOxE,OAAO4E,KAAKT,IAC7BU,EAAUL,IAAOxE,OAAO4E,KAAKT,IAE7BhB,EAAaf,KAAK1C,MAAMyD,WAC5BH,EAAWZ,KAAK1C,MAAMsD,SAIlBc,EAAM,SAAAD,GAAC,OAAKA,EAAEiB,SAAW,GAAK,GAClCC,EAAOP,IAAc,MACjBQ,EAAYR,IAAc,MAGhCS,EAAST,IAAaU,MAAM,IAAIC,KAAKC,SAAQ,GAAA1E,OAAIiE,EAAQrE,MAAM,KAAK,KAAO,EAAG,GAC5E,IAAI6E,KAAKC,SAAQ,GAAA1E,OAAImE,EAAQvE,MAAM,KAAK,KAAO,GAAI,KAIrD,OAAO2E,EAAO/D,IAAI,SAAAoD,GAChB,IAAMe,EAAOb,IAAYF,EAAO,IAAIa,KAAKb,EAAMgB,cAAehB,EAAMiB,WAAW,EAAG,IAK5E5B,EAJQ0B,EAAKnE,IAAI,SAAA2C,GAAC,OACtB7D,OAAO4E,KAAKT,GAAUqB,KAAK,SAAAC,GAAG,OAC5B,IAAIN,KAAKM,GAAKC,SAAS,EAAE,EAAE,EAAE,KAAO7B,EAAE6B,SAAS,EAAE,EAAE,EAAE,OAEnCxE,IAAI,SAAAyE,GAAC,QAAMA,GAAKxB,EAASwB,KAAIC,OAAO,SAAAC,GAAC,QAAMA,IACjE,OACIvC,EAAA5B,EAAA6B,cAAA,OACEG,UAAU,QACVoC,OAAqB,EAAX9C,EAA8B,EAAbG,EAAkB,GAC7C4C,MAAQ/C,EAAWqB,EAAaC,GAAWnB,GAAckB,EAAaC,GAAS,GAC/EmB,IAAKnB,GAELhB,EAAA5B,EAAA6B,cAAA,SACED,EAAA5B,EAAA6B,cAAA,QACEG,UAAU,aACVsC,EAAe,EAAXhD,EAA8B,EAAbG,EAAkB,GACvCrB,GAAKkB,EAAWqB,EAAaC,GAAWnB,GAAckB,EAAaC,GAAS,IAAO,EACnF2B,WAAW,UAEVjB,EAAUV,IAGXe,EAAKnE,IAAI,SAAA2C,GACL,IA3BG3D,EAAKgG,EAAKC,EA2BPhF,EAAOnB,OAAO4E,KAAKT,GAAUqB,KAAK,SAAAC,GAAG,OACzC,IAAIN,KAAKM,GAAKC,SAAS,EAAE,EAAE,EAAE,KAAO7B,EAAE6B,SAAS,EAAE,EAAE,EAAE,KACjDU,IAAUjC,EAAShD,KA7BtBjB,EA6ByCiE,EAAShD,GA7B7C+E,EA6BoDG,KAAKH,IAALI,MAAAD,KAAIrG,OAAAuG,EAAA,EAAAvG,CAAQ2D,IA7B3DwC,EA6BmEE,KAAKF,IAALG,MAAAD,KAAIrG,OAAAuG,EAAA,EAAAvG,CAAQ2D,KA7BxDzD,EAAMiG,IAAQD,EAAMC,GAAnC,IAA2C,KA8B1DK,EAAcrC,EAAShD,GAAQqD,IAAsB4B,GAAS,UACpE,OACA9C,EAAA5B,EAAA6B,cAAA,QACEkC,IAAK5B,EACLH,UAAU,MACVqC,MAAO/C,EACP8C,OAAQ9C,EACRyD,GAAI,GACJC,GAAI,GACJC,KAAMH,EACNR,EAAIlC,EAAID,GAAKb,EAAac,EAAID,GAAKV,EAAcA,EACjDrB,GAAKiD,EAAKlB,GAAKkB,EAAK,IAAII,KAAKtB,EAAEyB,cAAczB,EAAE0B,WAAW,KAAOvC,GAAc+B,EAAKlB,GAAKkB,EAAK,IAAII,KAAKtB,EAAEyB,cAAczB,EAAE0B,WAAW,KAAOpC,EAAcA,EACzJyD,YAAa,SAACC,GAAD,OAAQzC,EAAKrB,SAAS,CACjCP,YAAaqB,EACbF,MAASQ,EAAShD,GAAQgD,EAAShD,GAAQ,EAC3CuB,MAAO,CACLoE,IAAKD,EAAGE,QAAU,GAClBC,KAAMH,EAAGI,QAAU,OAGvBC,WAAY,kBAAM9C,EAAKrB,SAAS,CAC9BP,aAAa,KAEf2E,QAAS,kBAAM/C,EAAKzB,YAAYkB,oDAelD,IAAMuD,EAAYC,MAAMf,MAAM,KAAMe,MAAM,IAAInG,IAAI,SAAUoG,EAAG3B,GAC7D,OAAOlF,IAAOkF,EAAG,KAAK4B,QAAQ,QAAQC,WAAW7B,EAAE,GAAG9E,OAAO,SAE/D,OAAQyC,EAAA5B,EAAA6B,cAAA,SAEJ6D,EAAUlG,IAAI,SAAA4C,GAAG,OACfR,EAAA5B,EAAA6B,cAAA,QACEkC,IAAK3B,EACLJ,UAAU,aAETI,aA7JS2D,IAAMC,YCwCbC,cAtCb,SAAAA,IAAe,IAAAzF,EAAA,OAAAlC,OAAAmC,EAAA,EAAAnC,CAAAoC,KAAAuF,IACbzF,EAAAlC,OAAAqC,EAAA,EAAArC,CAAAoC,KAAApC,OAAAsC,EAAA,EAAAtC,CAAA2H,GAAApF,KAAAH,QACK1C,MAAQ,CACXsB,KAAM,IAHKkB,mFAOM,IAAAkC,EAAAhC,KACnBoC,IAAOxD,KAAM4G,KAAK,SAAA5G,GAChBoD,EAAKrB,SAAS,CAAE/B,KAAMY,EAAUZ,GAAOgD,QAAShD,MAC/C6G,MAAM,SAAAC,GACP,MAAMA,qCAKR,OACExE,EAAA5B,EAAA6B,cAAA,OAAKG,UAAU,OACbJ,EAAA5B,EAAA6B,cAAA,UAAQG,UAAU,UAChBJ,EAAA5B,EAAA6B,cAAA,OAAKG,UAAU,SAAf,mCAEFJ,EAAA5B,EAAA6B,cAAA,OAAKG,UAAU,WACbJ,EAAA5B,EAAA6B,cAAA,eACED,EAAA5B,EAAA6B,cAAA,6BAEEvD,OAAO4E,KAAKxC,KAAK1C,MAAMsB,MAAMpB,OAAS,GACtC0D,EAAA5B,EAAA6B,cAACwE,EAAD,CACE/G,KAAMoB,KAAK1C,MAAMsB,KACjBgD,QAAS5B,KAAK1C,MAAMsE,oBA7BlB0D,aCKEM,QACW,cAA7B/E,OAAOgF,SAASC,UAEe,UAA7BjF,OAAOgF,SAASC,UAEhBjF,OAAOgF,SAASC,SAASC,MACvB,2DCRN,IAAMC,EAAQC,YAAY9I,GAE1B+I,IAASC,OACPjF,EAAA5B,EAAA6B,cAACiF,EAAA,EAAD,CAAUJ,MAAOA,GACf9E,EAAA5B,EAAA6B,cAACkF,EAAD,OAEFC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC","file":"static/js/main.f28d6c19.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.2340907b.csv\";","const SET_INITIAL = 'SET/INITIAL';\nconst SET_YEARS = 'SET/YEARS';\nconst SET_RATE = 'SET/RATE';\nconst SET_MONTHLY_OVERPAYMENT = 'SET/MONTHLY_OVERPAYMENT';\n\nconst initialState = {\n  initial: 200000,\n  rate: 5,\n  years: 25,\n  monthlyOverpayment: 0\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_INITIAL:\n      return {\n        ...state,\n        initial: action.val\n      };\n    case SET_RATE:\n      return {\n        ...state,\n        rate: action.val\n      };\n    case SET_YEARS:\n      return {\n        ...state,\n        years: action.val\n      };\n    case SET_MONTHLY_OVERPAYMENT:\n      return {\n        ...state,\n        monthlyOverpayment: action.val\n      };\n    default:\n      return state;\n  }\n}\n\nexport const setInitial = val => ({ type: SET_INITIAL, val });\nexport const setYears = val => ({ type: SET_YEARS, val });\nexport const setRate = val => ({ type: SET_RATE, val });\nexport const setMonthlyOverpayment = val => ({ type: SET_MONTHLY_OVERPAYMENT, val });\n","import { combineReducers } from 'redux';\nimport mortgage from './mortgage';\n\nconst rootReducer = combineReducers({\n  mortgage\n});\n\nexport default rootReducer;\n","import moment from 'moment';\n\nconst parseTimestamp = timeStamp => {\n  const dateString = timeStamp.split('T')[0];\n  const timeString = timeStamp.split('T')[1].slice(0, -1);\n  return moment(`${dateString} ${timeString}`, 'YYYYMMDD HHmmss').toDate();\n};\n\nconst parseTime = timeStamp => {\n  const timeString = timeStamp.split('T')[1].slice(0, -1);\n  return moment(`${timeString}`, 'HHmmss').format(\"HH:mm:ss\");\n};\n\nconst parseDate = timeStamp => moment(`${timeStamp.split('T')[0]}`, 'YYYYMMDD')//.toDate()\n  .format('YYYY-MM-DD').split('T')[0];\n\nconst countOccurrences = arr => arr.reduce(function(obj, item) {\n  obj[item] = (obj[item] || 0) + 1;\n  return obj;\n}, {});\n\nconst parseData = data => {\n  let newData = data.map(item => ({ timestamp: parseDate(item[data.columns[0]]) }));\n  newData.push({ timestamp: parseDate(data.columns[0]) });\n  const x = newData.map(item => item.timestamp);\n  return countOccurrences(x);\n};\n\nconst groupBy = arr => arr.reduce(function (r, a) {\n  r[a.date] = r[a.date] || [];\n  r[a.date].push(a.time);\n  return r;\n}, Object.create(null));\n\nexport const getDayInsights = data => {\n  let newData = data.map(item => ({ date: parseDate(item[data.columns[0]]), time: parseTime(item[data.columns[0]]) }));\n  newData.push({ date: parseDate(data.columns[0]), time: parseTimestamp(data.columns[0]) });\n  return groupBy(newData);\n};\n\nexport default parseData;\n","import React from 'react';\nimport * as d3 from 'd3';\nimport moment from 'moment';\nimport { getDayInsights } from '../helpers/parser';\nimport './Heatmap.css';\n\nclass Heatmap extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      showTooltip: false,\n      renderBarChart: false,\n      style: {}\n    };\n    this.renderChart = this.renderChart.bind(this);\n    this.updateDimensions = this.updateDimensions.bind(this);\n  }\n\n  updateDimensions() {\n    this.setState({\n      cellSize: window.innerWidth / 100,\n      cellMargin: window.innerWidth / 400\n    });\n  }\n\n  componentWillMount() {\n    this.updateDimensions();\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions);\n  }\n\n  render() {\n    return (\n      <div id='calendar'>\n        { this.drawDayLabels() }\n        {\n          this.state.showTooltip &&\n            <div className='tooltip' style={this.state.style}>\n              {moment(this.state.showTooltip).format('dddd, MMMM DD YYYY')}\n              <div className='text'>\n                Count: {this.state.count}\n              </div>\n            </div>\n        }\n        <div className='months'>\n          { this.drawCalendar(this.props.data) }\n        </div>\n      </div>\n    );\n  }\n\n  renderChart(d) {\n    const day = moment(d).format('YYYY-MM-DD');\n    const dayInsights = getDayInsights(this.props.rawData);\n    console.log(dayInsights[day]);\n  }\n\n  drawCalendar(dateData) {\n    const weeksInMonth = month => {\n      const m = d3.timeMonth.floor(month);\n      return d3.timeWeeks(d3.timeWeek.floor(m), d3.timeMonth.offset(m,1)).length;\n    };\n\n    const minDate = d3.min(Object.keys(dateData));\n    const maxDate = d3.max(Object.keys(dateData));\n\n    const cellMargin = this.state.cellMargin,\n      cellSize = this.state.cellSize;\n    // const cellMargin = 4,\n    //   cellSize = 16;\n\n    const day = d => (d.getDay() + 6) % 7,\n      week = d3.timeFormat('%W');\n    const monthName = d3.timeFormat('%B'),\n      // months = d3.timeMonth.range(d3.timeMonth.floor(new Date(`01-01-${minDate.split('-')[0]}`)),\n      //   d3.timeMonth.ceil(new Date(`31-12-${maxDate.split('-')[0]}`)));\n    months = d3.timeMonth.range(new Date(parseInt(`${minDate.split('-')[0]}`), 0, 1),\n      new Date(parseInt(`${maxDate.split('-')[0]}`), 11, 31));\n\n    const normalize = (val, max, min) => (1 - 0.25) * ((val - min) / (max - min)) + 0.25;\n\n    return months.map(month => {\n      const days = d3.timeDays(month, new Date(month.getFullYear(), month.getMonth()+1, 1));\n      let filters = days.map(d =>\n        Object.keys(dateData).find(key =>\n          new Date(key).setHours(0,0,0,0) === d.setHours(0,0,0,0))\n      );\n      const count = filters.map(i => !!i && dateData[i]).filter(j => !!j);\n      return (\n          <svg\n            className='month'\n            height={((cellSize * 7) + (cellMargin * 8) + 20)}\n            width={(cellSize * weeksInMonth(month)) + (cellMargin * (weeksInMonth(month) + 1))}\n            key={month}\n          >\n            <g>\n              <text\n                className='month-name'\n                y={(cellSize * 7) + (cellMargin * 8) + 15}\n                x={((cellSize * weeksInMonth(month)) + (cellMargin * (weeksInMonth(month) + 1))) / 2}\n                textAnchor='middle'\n              >\n                {monthName(month)}\n              </text>\n              {\n                days.map(d => {\n                    const item = Object.keys(dateData).find(key =>\n                      new Date(key).setHours(0,0,0,0) === d.setHours(0,0,0,0));\n                    const value = !!dateData[item] && normalize(dateData[item], Math.max(...count), Math.min(...count));\n                    const fillColor = !!dateData[item] ? d3.interpolatePurples(value) : '#eaeaea';\n                    return (\n                    <rect\n                      key={d}\n                      className='day'\n                      width={cellSize}\n                      height={cellSize}\n                      rx={50}\n                      ry={50}\n                      fill={fillColor}\n                      y={(day(d) * cellSize) + (day(d) * cellMargin) + cellMargin}\n                      x={((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellSize) + ((week(d) - week(new Date(d.getFullYear(),d.getMonth(),1))) * cellMargin) + cellMargin}\n                      onMouseOver={(ev) => this.setState({\n                        showTooltip: d,\n                        count: !!dateData[item] ? dateData[item] : 0,\n                        style: {\n                          top: ev.clientY + 10,\n                          left: ev.clientX + 10\n                        }\n                      })}\n                      onMouseOut={() => this.setState({\n                        showTooltip: false\n                      })}\n                      onClick={() => this.renderChart(d)}\n                    >\n                    </rect>\n                  )\n                }\n                )\n              }\n            </g>\n          </svg>\n        );\n      }\n    );\n  }\n\n  drawDayLabels() {\n    const weekArray = Array.apply(null, Array(7)).map(function (_, i) {\n      return moment(i, 'e').startOf('week').isoWeekday(i+1).format('ddd');\n    });\n    return (<g>\n      {\n        weekArray.map(day =>\n          <text\n            key={day}\n            className='dayLabels'\n          >\n            {day}\n          </text>\n        )\n      }\n    </g>);\n  }\n}\n\nexport default Heatmap;\n","import React, { Component } from 'react';\nimport './App.css';\nimport * as d3 from 'd3';\nimport data from '../data/data.csv';\nimport parseData from '../helpers/parser';\nimport Heatmap from './Heatmap';\n\nclass App extends Component {\n  constructor () {\n    super();\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount () {\n    d3.csv(data).then(data => {\n      this.setState({ data: parseData(data), rawData: data });\n    }).catch(err => {\n      throw err;\n    });\n  }\n\n  render () {\n    return (\n      <div className='app'>\n        <header className='header'>\n          <div className='title'> Visualizing Time-Series Data </div>\n        </header>\n        <div className='content'>\n          <section>\n            <p>Calendar heatmap</p>\n            {\n              Object.keys(this.state.data).length > 0 &&\n              <Heatmap\n                data={this.state.data}\n                rawData={this.state.rawData}\n              />\n            }\n          </section>\n      </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\n\nimport rootReducer from './reducers';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}